name: Local CI Pipeline with Docker

# Trigger the workflow on pushes to the master branch or on pull requests
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build-and-test:
    # First job: Build and test the application
    name: Build and Test Application
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for accurate build information

      # Step 2: Set up Java
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Build the application and run tests
      - name: Build and Test
        run: mvn clean package

  docker:
    # Second job: Build the Docker image and run the container locally
    name: Build and Run Docker Container
    runs-on: ubuntu-latest
    needs: build-and-test # This job depends on the previous job's success

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Build the Docker image
      - name: Build Docker Image
        run: docker build -t customer-api .

      # Step 3: Run the Docker container
      - name: Run Docker Container
        run: |
          docker run -d -p 8080:8080 --name customer-api-container customer-api
          sleep 10 # Wait for the container to initialize

      # Step 4: Validate the container is running
      - name: Validate Container
        run: curl -f http://localhost:8080/actuator/health || exit 1

      # Step 5: Stop and remove the Docker container
      - name: Cleanup Docker Container
        run: |
          docker stop customer-api-container
          docker rm customer-api-container
